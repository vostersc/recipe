const p = require('puppeteer');
const proxyUrls = require('./proxyUrls.json');
const userAgents = require('./userAgents.json');
const viewPorts = require('./viewPorts.json');

module.exports = {getData, doAction, exampleSelectorFunction, exampleActionFunction};

async function getData(config, skipClose){
    let data = [];

    for(let i = 0; i < config.length; i++){
        try {
            const result = await launchInstance(config[i].selector, config[i].urls, skipClose);
            if(result.length <= 0) throw new Error(`Problem getting results from ${config[i].urls}`);
        
            data = [...data, {...config[i], result}];
        } catch (err){
            console.log('index.js: 25 --->', err);
            data = [...data, {...config[i], result: err}]; 
        }
    }

    return data;
}

async function doAction(urls, action, miscData, noAnon, keepOpen){
    try {
        await launchInstance(action, urls, miscData, noAnon, keepOpen);
    } catch (err){
        console.log('index.js: 25 --->', err);
        return
    }

}

async function launchInstance(requestFn, urls, miscData, noAnon, keepOpen){
        const opts = {
            headless: false,
            args: [ '--start-maximized', proxyUrls[getRandomArbitrary(proxyUrls.length - 1)] ]
        };
        const browser = await p.launch(opts);
        const page = await browser.newPage();

        page.on('console', msg => console.log(msg.text())); //TURN ON FOR CONSOLE LOGS INSIDE .evaluate
    
        const randomViewport = viewPorts[getRandomArbitrary(viewPorts.length - 1)];
        if(!noAnon) await page.setViewport(randomViewport);
     
        const randomUserAgent = userAgents[getRandomArbitrary(userAgents.length - 1)];
        if(!noAnon) await page.setUserAgent(randomUserAgent);
    
        let data = [];
        for (let i = 0; i < urls.length; i++) {
            data = [...data, await requestFn(page, urls[i], miscData[i])];
        }
    
        if(!keepOpen){
            await browser.close();
            return data.flat();
        }

        await delay(3600000); //keep open for 1hr
}


//helper fns

async function exampleSelectorFunction(page, url){
    await page.goto(url);
    await page.waitForSelector('a');

    const exampleUrls = await page.evaluate(() => {
        return [...document.getElementsByTagName('a')].map(el => el.href);
    });

    return exampleUrls;
}

async function exampleActionFunction(page, url, qty = 1){
    try {
        await page.goto(url);
        await page.waitForSelector('.add-to-cart-button', {visible: true})
        page.keyboard.press('Escape');
    
        for(let i = 0; i < qty; i++){
            await delay(5000);
            await page.evaluate(() => document.querySelector('[data-test*="add-to-cart-button"]').click());
            await delay(5000);
        }
    } catch(err){
        console.log('index.js: 25 --->', err);
        return
    }
}

function getRandomArbitrary(max = 3) { return Math.ceil(Math.random() * max); }

function delay(time) {
    return new Promise(function(resolve) { setTimeout(resolve, time); });
 }

async function waitFor(page){
    const randomTime = Math.ceil(Math.random() * 7000);
    await page.waitForTimeout(randomTime);
}