const p = require('puppeteer');
const proxyUrls = require('./proxyUrls.json');
const userAgents = require('./userAgents.json');
const viewPorts = require('./viewPorts.json');

// https://scrapingant.com/free-proxies
// https://stackoverflow.com/questions/67569465/webscraper-being-blocked-how-to-make-a-puppeteer-ip-address-rotation


///////////////////
// EXAMPLE CALLS //
///////////////////

// (async function(){
//     const allForumPostUrls = await launchInstance(getAllPostUrls, formatForCorrectForumUrls(['https://reddit.com/r/painting']));
//     console.log('index.js: 20 --->', allForumPostUrls);
//     if(allForumPostUrls.length > 5) allForumPostUrls.length = 5;
//     const allUsersFromPosts = await launchInstance(getAllUserUrls, allForumPostUrls);
//     console.log('index.js: 22 --->', allUsersFromPosts);
//     const allForumUsersData = await launchInstance(getAllUserComments, formatForCorrectUserCommentUrls(allUsersFromPosts));
//     console.log('index.js: 24 --->', allForumUsersData);
// }());

///////////////////
///////////////////

module.exports = { launchInstance, formatForCorrectForumUrls, formatForCorrectUserCommentUrls, getAllPostUrls, getAllUserUrls, getAllUserComments };

async function launchInstance(requestFn, urls){
    const opts = {
        // headless: false,
        args: [ '--start-maximized', proxyUrls[getRandomArbitrary(proxyUrls.length - 1)] ]
    };
    const browser = await p.launch(opts);
    const page = await browser.newPage();

    const randomViewport = viewPorts[getRandomArbitrary(viewPorts.length - 1)];
    await page.setViewport(randomViewport);
 
    const randomUserAgent = userAgents[getRandomArbitrary(userAgents.length - 1)];
    await page.setUserAgent(randomUserAgent);

    let data = [];
    for (let i = 0; i < urls.length; i++) {
        data = [...data, await requestFn(page, urls[i])];
    }

    await browser.close();
    return data.flat();
}

function formatForCorrectForumUrls(forumUrls){ return forumUrls.map(url => url + '/top'); }
function formatForCorrectUserCommentUrls(userUrls){ return userUrls.map(url => url + '/comments'); }

function getRandomArbitrary(max = 3) { return Math.ceil(Math.random() * max); }

async function getAllPostUrls(page, url){
    await page.goto(url);
    await waitFor(page);
  
    const postUrls = await page.evaluate(() => {
        return [...document.getElementsByTagName('a')].map(el => el.href).filter(el => el.includes('/comments/') && !el.includes('/user/'));
    });

    return eliminateDuplicates(postUrls);
}

async function getAllUserUrls(page, url){
    await page.goto(url);
    await waitFor(page);

    const userUrls = await page.evaluate(() => {
        const allLinks = [...document.getElementsByTagName('a')].map(el => el.href);
        return allLinks.filter(el => el.includes('/user/') && !el.includes('/comments/'));
    });

    return eliminateDuplicates(userUrls);
}

async function getAllUserComments(page, url){
    await page.goto(url);
    await waitFor(page);

    const userData = await page.evaluate(() => {
        const allForums = [...document.getElementsByTagName('a')].map(el => el.href).filter(el => el.includes('/r/' && !el.includes('/comments/')));
        // const allComments = [...document.getElementsByTagName('p')].map(el => el.innerText); // need to figure out how to best pair comments with the forum where the comment was made
        const isModerator = [...document.querySelectorAll('[title]')].filter(el => el.href?.includes('moderator')).map(el => el.href);

        return {allForums, isModerator};
    });

    console.log('index.js: 93 --->', ':)');
    return {
        userUrl: url,
        allForums: eliminateDuplicates(userData.allForums),
        // allComments: eliminateDuplicates(userData.allComments),
        isModerator: userData.isModerator,
        userMessageUrl: 'https://www.reddit.com/message/compose/?to=' + url.split('/user/')[1]
        // https://www.reddit.com/message/compose/?to=MeltAway421&message=eee&subject=rr
    };
}

async function waitFor(page){
    const randomTime = Math.ceil(Math.random() * 7000);
    await page.waitForTimeout(randomTime);
}

function eliminateDuplicates(opts){
    return opts.reduce(function(a, b){
        if (a.indexOf(b) < 0) a.push(b);

        return a;
    },[]);
}

